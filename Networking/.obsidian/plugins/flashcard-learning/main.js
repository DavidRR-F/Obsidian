/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FlashcardLearningPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/modals/create-flashcard.ts
var import_obsidian = require("obsidian");

// src/model/flashcard.ts
var Flashcard = class {
  constructor(level, reviewIndex, deck, side1Desc, side1, side2Desc, side2, file, lineNb) {
    if (side1 === void 0)
      throw new Error("side1 is not defined");
    if (side2 === void 0)
      throw new Error("side2 is not defined");
    if (level === void 0)
      throw new Error("Level is not defined");
    this.file = file;
    this.lineNb = lineNb;
    this.deck = deck != null ? deck : "No deck";
    this.side1 = side1;
    this.side1Desc = side1Desc;
    this.side2 = side2;
    this.side2Desc = side2Desc;
    this.level = level;
    this.nextReview = reviewIndex;
    this.malformed = false;
  }
  toString() {
    return `\u{1F0DF} Flaschcard: (${this.level}, ${this.nextReview}, ${this.deck}) (${this.side1Desc}: ${this.side1}) (${this.side2Desc}: ${this.side2})`;
  }
  static isStrAFlashcard(str) {
    if (str.startsWith("\u{1F0DF} Flaschcard:") || str.startsWith("FLASHCARD - "))
      return true;
    return false;
  }
  static fromString(file, lineNb, str) {
    if (str.startsWith("FLASHCARD - ")) {
      try {
        const elements = str.replace("FLASHCARD - ", "").replace(" - lvl ", "///").replace(" - review index ", "///").replace(": ", "///").replace("->", "///").replace(" ? ", "///").replace("->", "///").trim().replace(" ### Malformed flashcard ###", "").split("///");
        const deck = elements[0];
        return new Flashcard(parseInt(elements[1]), 0, deck, elements[3], elements[4], elements[5], elements[6], file, lineNb);
      } catch (e) {
        const flashcard = new Flashcard(-2, -2, void 0, "", "", "", "", file, lineNb);
        flashcard.malformed = "\u274C\uFE0F" + str.replace(" ### Malformed flashcard ###", "");
        return flashcard;
      }
    } else {
      try {
        let infos = str.replace("\u{1F0DF} Flaschcard:", "").trim();
        const metaPart = infos.substring(0, infos.indexOf(")") + 1).trim();
        infos = infos.replace(metaPart, "").trim();
        const side1Part = infos.substring(0, infos.indexOf(")") + 1).trim();
        infos = infos.replace(side1Part, "").trim();
        const side2Part = infos.substring(0, infos.indexOf(")") + 1).trim();
        const metaSplited = metaPart.substring(1, metaPart.length - 1).split(",");
        const lvl = parseInt(metaSplited[0].trim());
        const reviewIndex = parseInt(metaSplited[1].trim());
        const deck = metaSplited[2].trim();
        const part1Splited = side1Part.substring(1, side1Part.length - 1).split(":");
        const side1Desc = part1Splited[0].trim();
        const side1 = part1Splited[1].trim();
        const part2Splited = side2Part.substring(1, side2Part.length - 1).split(":");
        const side2Desc = part2Splited[0].trim();
        const side2 = part2Splited[1].trim();
        return new Flashcard(lvl, reviewIndex, deck, side1Desc, side1, side2Desc, side2, file, lineNb);
      } catch (e) {
        const flashcard = new Flashcard(-2, -2, void 0, "", "", "", "", file, lineNb);
        flashcard.malformed = "\u274C\uFE0F" + str;
        return flashcard;
      }
    }
  }
  reset() {
    this.level = -1;
    this.nextReview = 0;
    return this.toString();
  }
  // When hitting 'Correct' button while reviewing a flashcard: change metadata of the card, and update file
  async wasCorrect(vault, currentIndex) {
    this.level++;
    this.nextReview = currentIndex + this.level;
    await this.save(vault);
  }
  // When hitting 'Wrong' button while reviewing a flashcard: change metadata of the card, and update file
  async wasWrong(vault) {
    this.level = 0;
    await this.save(vault);
  }
  // Save the Flashcard at the right place (line and file)
  async save(vault) {
    if (this.file != void 0 && this.lineNb != void 0) {
      const lines = (await vault.read(this.file)).split("\n");
      lines[this.lineNb] = this.toString();
      await vault.modify(this.file, lines.join("\n"));
    }
  }
};

// src/modals/create-flashcard.ts
var CreateFlashcardModal = class extends import_obsidian.Modal {
  constructor(app, frontmatter, lineNb, onSubmit) {
    var _a, _b, _c, _d, _e, _f, _g;
    super(app);
    this.onSubmit = onSubmit;
    this.deck = (_a = frontmatter == null ? void 0 : frontmatter.deck) != null ? _a : "No deck";
    this.level = (_b = frontmatter == null ? void 0 : frontmatter.level) != null ? _b : -1;
    this.nextReview = (_c = frontmatter == null ? void 0 : frontmatter.nextReview) != null ? _c : 0;
    this.side1Desc = (_d = frontmatter == null ? void 0 : frontmatter.side1Desc) != null ? _d : "";
    this.side1 = (_e = frontmatter == null ? void 0 : frontmatter.side1) != null ? _e : "";
    this.side2Desc = (_f = frontmatter == null ? void 0 : frontmatter.side2Desc) != null ? _f : "";
    this.side2 = (_g = frontmatter == null ? void 0 : frontmatter.side2) != null ? _g : "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Create new Flashcard" });
    new import_obsidian.Setting(contentEl).setName("Deck").addText((text) => text.onChange((value) => this.deck = value.trim()).setValue(this.deck));
    new import_obsidian.Setting(contentEl).setName("Side 1 description").addText((text) => text.onChange((value) => this.side1Desc = value.trim()).setValue(this.side1Desc));
    new import_obsidian.Setting(contentEl).setName("Side 1").addText((text) => text.onChange((value) => this.side1 = value.trim()).setValue(this.side1));
    new import_obsidian.Setting(contentEl).setName("Side 2 description").addText((text) => text.onChange((value) => this.side2Desc = value.trim()).setValue(this.side2Desc));
    new import_obsidian.Setting(contentEl).setName("Side 2").addText((text) => text.onChange((value) => this.side2 = value.trim()).setValue(this.side2));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Create").setCta().onClick(() => {
      this.close();
      this.onSubmit(
        new Flashcard(this.level, this.nextReview, this.deck, this.side1Desc, this.side1, this.side2Desc, this.side2),
        new Flashcard(this.level, this.nextReview, this.deck, this.side2Desc, this.side2, this.side1Desc, this.side1)
      );
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/home.ts
var import_obsidian3 = require("obsidian");

// src/modals/review.ts
var import_obsidian2 = require("obsidian");
var ReviewModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, allFlashcards) {
    super(app);
    this.flashcards = [];
    this.toReview = [];
    this.plugin = plugin;
    this.reviewIndex = plugin.settings.reviewIndex;
    this.flashcards = allFlashcards;
    this.modalEl.addClasses(["h-80pct", "w-80pct", "max-w-500px"]);
  }
  onOpen() {
    this.toReview = this.flashcards.filter((fc) => fc.nextReview <= this.reviewIndex).filter((fc) => fc.level >= 0);
    this.contentEl.createEl("h1", { text: `\u{1F914} Flashcard Review #${this.plugin.settings.reviewIndex}` });
    this.displayNextFlashcard();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    new HomeModal(this.app, this.plugin).open();
  }
  reviewFinished() {
    this.plugin.settings.reviewIndex++;
    this.plugin.saveData(this.plugin.settings);
    const newFlashcards = [];
    const pool = this.flashcards.filter((fc) => fc.level == -1);
    if (pool.length > 0) {
      for (let i = 0; i < this.plugin.settings.newCardNbOnReview; i++) {
        const fc = pool[Math.floor(Math.random() * pool.length)];
        fc.level = 0;
        fc.nextReview = this.plugin.settings.reviewIndex;
        fc.save(this.plugin.app.vault);
        console.log("New Card added:", fc.toString());
      }
    }
    const box = this.container.createDiv();
    box.addClasses(["col-space-around", "w-100pct", "h-100pct"]);
    const box_row1 = box.createDiv();
    box_row1.addClasses(["row-center", "w-100pct"]);
    box_row1.createSpan({ text: "\u{1F44F}\u{1F44F}\u{1F44F}" });
    const box_row2 = box.createDiv();
    box_row2.addClasses(["row-center", "w-100pct"]);
    box_row2.createSpan({ text: "Congratulation, you went through your review!" });
    const box_row3 = box.createDiv();
    box_row3.addClasses(["row-center", "w-100pct"]);
    box_row3.createSpan({ text: "\u{1F44F}\u{1F44F}\u{1F44F}" });
    const btn_container = this.container.createDiv();
    btn_container.addClasses(["row-center"]);
    const btn = btn_container.createEl("button", { text: "Close" });
    btn.addClasses(["w-50pct"]);
    btn.onClickEvent(() => this.close());
  }
  displayNextFlashcard() {
    var _a;
    if (this.container)
      this.container.remove();
    this.container = this.contentEl.createDiv();
    this.container.addClasses(["h-90pct", "col-space-between"]);
    if (this.toReview.length == 0)
      return this.reviewFinished();
    const flashcard = this.toReview[Math.floor(Math.random() * this.toReview.length)];
    const infos = this.container.createDiv();
    infos.addClasses(["col-space-around", "p-y-10px"]);
    const line1 = infos.createDiv();
    line1.addClasses(["row-space-between"]);
    const deck_html = line1.createDiv({ text: `\u{1F4E6} ${flashcard.deck}` });
    deck_html.addClasses(["nowrap", "max-w-60pct", "overflow-hidden", "p-5px"]);
    const number_html = line1.createDiv({ text: `\u23F2\uFE0F ${this.toReview.length} left`, cls: "nowrap" });
    number_html.addClasses(["nowrap", "max-w-100pct", "overflow-hidden", "p-5px"]);
    const line2 = infos.createDiv();
    line2.addClasses(["row-space-between"]);
    const file_html = line2.createSpan({ text: `\u{1F4C1} ${(_a = flashcard.file) == null ? void 0 : _a.basename}`, cls: "nowrap" });
    file_html.addClasses(["nowrap", "max-w-60pct", "overflow-hidden", "p-5px"]);
    const level_html = line2.createDiv({ text: `\u{1F199} Level ${flashcard.level}` });
    level_html.addClasses(["nowrap", "p-5px"]);
    const front = this.container.createDiv();
    front.addClasses(["col-space-between", "w-100pct", "flex-grow", "box", "m-y-10px"]);
    const front_row_desc = front.createDiv();
    front_row_desc.addClasses(["row-start", "w-100pct", "p-10px"]);
    front_row_desc.createSpan({ text: flashcard.side1Desc + ":" });
    const front_row_content = front.createDiv();
    front_row_content.addClasses(["row-center", "w-100pct", "p-10px", "txt-center", "overflow-hidden"]);
    front_row_content.createSpan({ text: flashcard.side1 });
    const front_placeholder = front.createDiv();
    front_placeholder.addClasses(["p-10px", "invisible"]);
    front_placeholder.createSpan({ text: "placeholder" });
    const back = this.container.createDiv();
    back.addClasses(["col-space-between", "w-100pct", "flex-grow", "box", "m-y-10px"]);
    const back_row_desc = back.createDiv();
    back_row_desc.addClasses(["row-start", "w-100pct", "p-10px"]);
    back_row_desc.createSpan({ text: flashcard.side2Desc + ":" });
    const back_row_content = back.createDiv();
    back_row_content.addClasses(["row-center", "w-100pct", "p-10px", "txt-center", "overflow-hidden"]);
    let answer = back_row_content.createSpan({ text: "\u2753" });
    const back_placeholder = back.createDiv();
    back_placeholder.addClasses(["p-10px", "invisible"]);
    back_placeholder.createSpan({ text: "placeholder" });
    const commands_container = this.container.createDiv();
    commands_container.addClasses(["w-100pct", "row-center"]);
    const showAnswer = commands_container.createEl("button", { text: "\u{1F440} Show answer" });
    showAnswer.addClasses(["w-33pct", "txt-bold", "visible", "btn-height"]);
    showAnswer.onClickEvent(() => {
      answer.remove();
      answer = back_row_content.createSpan({ text: flashcard.side2 });
      showAnswer.removeClass("visible");
      showAnswer.addClass("hidden");
      commands_container.removeClass("row-center");
      wrongBtn.removeClass("hidden");
      wrongBtn.addClass("visible");
      correcBtn.removeClass("hidden");
      correcBtn.addClass("visible");
      commands_container.addClass("row-space-around");
    });
    const wrongBtn = commands_container.createEl("button", { text: "\u2716\uFE0F Wrong" });
    wrongBtn.addClasses(["w-33pct", "bg-red", "txt-bold", "hidden", "max-w-33pct", "btn-height"]);
    wrongBtn.onClickEvent(() => {
      console.log("Before Wrong:", flashcard.toString());
      flashcard.wasWrong(this.app.vault);
      console.log("After Wrong:", flashcard.toString());
      this.displayNextFlashcard();
    });
    const correcBtn = commands_container.createEl("button", { text: "\u2714\uFE0F Correct" });
    correcBtn.addClasses(["w-33pct", "bg-green", "txt-dark", "txt-bold", "hidden", "max-w-33pct", "btn-height"]);
    correcBtn.onClickEvent(async () => {
      console.log("Before Correct:", flashcard.toString());
      await flashcard.wasCorrect(this.app.vault, this.plugin.settings.reviewIndex);
      console.log("After Correct:", flashcard.toString());
      this.toReview.remove(flashcard);
      this.displayNextFlashcard();
    });
  }
};

// src/modals/home.ts
var HomeModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.modalEl.addClasses(["w-80pct", "max-w-500px"]);
  }
  async onOpen() {
    this.contentEl.createEl("h1", { text: "\u{1F0DF} Flashcard Learning" });
    const container = this.contentEl.createDiv();
    container.addClasses(["col-start"]);
    await this.fetchFlashcards();
    const review_container = container.createDiv();
    review_container.addClasses(["col-start", "p-y-10px", "p-x-30px"]);
    review_container.createEl("h5", { text: "\u{1F500} Review" });
    const settings_container = review_container.createDiv();
    settings_container.addClasses(["col-start", "p-y-10px", "p-x-30px"]);
    new import_obsidian3.Setting(settings_container).setName(`Review (index: ${this.plugin.settings.reviewIndex})`).addButton(
      (button) => button.setButtonText("Start").onClick(() => {
        new ReviewModal(this.app, this.plugin, this.flashcards).open();
        this.close();
      })
    );
    const avgLevel = this.flashcards.reduce((acc, cur) => acc + cur.level, 0) / this.flashcards.length;
    const higherLevel = Math.max(...this.flashcards.map((fc) => fc.level));
    const histogram = [];
    for (let i = 0; i <= higherLevel; i++) {
      const nb = this.flashcards.filter((fc) => fc.level == i).length;
      histogram.push({ count: nb, rate: Math.round(nb / this.flashcards.length * 100) });
    }
    const newFlashcardsNb = this.flashcards.reduce((acc, cur) => cur.level == -1 ? acc + 1 : acc, 0);
    const stats_container = container.createDiv();
    stats_container.addClasses(["col-start", "p-y-10px", "p-x-30px"]);
    stats_container.createEl("h5", { text: "\u{1F4CA} Statistics" });
    const stats_newflashcardNumber = stats_container.createDiv();
    stats_newflashcardNumber.addClasses(["row-space-between", "p-y-10px", "p-x-30px"]);
    stats_newflashcardNumber.createDiv({ text: "New flashcard number:" });
    stats_newflashcardNumber.createDiv({ text: newFlashcardsNb + "" });
    const stats_flashcardNumber = stats_container.createDiv();
    stats_flashcardNumber.addClasses(["row-space-between", "p-y-10px", "p-x-30px"]);
    stats_flashcardNumber.createDiv({ text: "Flashcard number:" });
    stats_flashcardNumber.createDiv({ text: this.flashcards.length + "" });
    const stats_avgLevel = stats_container.createDiv();
    stats_avgLevel.addClasses(["row-space-between", "p-y-10px", "p-x-30px"]);
    stats_avgLevel.createDiv({ text: "Average level:" });
    stats_avgLevel.createDiv({ text: Math.round(avgLevel * 10) / 10 + "" });
    const stats_higherLevel = stats_container.createDiv();
    stats_higherLevel.addClasses(["row-space-between", "p-y-10px", "p-x-30px"]);
    stats_higherLevel.createDiv({ text: "Higher level:" });
    stats_higherLevel.createDiv({ text: higherLevel + "" });
    const stats_histogram = stats_container.createDiv();
    stats_histogram.addClasses(["col-start", "p-x-30px"]);
    for (let i = 0; i < histogram.length; i++) {
      const row = stats_histogram.createDiv();
      row.addClasses(["row-space-between", "p-y-10px"]);
      row.createDiv({ text: "Cards at level " + i });
      row.createDiv({ text: histogram[i].count + " (" + histogram[i].rate + "%)" });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async fetchFlashcards() {
    let malformedFound = false;
    this.flashcards = [];
    await Promise.all(
      // Go through all the files
      this.app.vault.getMarkdownFiles().filter((file) => {
        var _a, _b;
        return (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.flashcard;
      }).map(async (file) => {
        let needToSave = false;
        const lines = (await this.app.vault.read(file)).split("\n");
        lines.forEach(async (line, i) => {
          if (Flashcard.isStrAFlashcard(line)) {
            const flashcard = Flashcard.fromString(file, i, line);
            if (!flashcard.malformed)
              this.flashcards.push(flashcard);
            else {
              needToSave = true;
              malformedFound = true;
              lines[i] = flashcard.malformed;
            }
          }
        });
        if (needToSave)
          this.plugin.app.vault.modify(file, lines.join("\n"));
      })
    );
    if (malformedFound)
      new import_obsidian3.Notice('Malformed Flashcard has been found, look for string "\u274C\uFE0F" to find them.');
  }
};

// src/settings.ts
var import_obsidian5 = require("obsidian");

// src/modals/confirm.ts
var import_obsidian4 = require("obsidian");
var ConfirmModal = class extends import_obsidian4.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Are your sure?" });
    const row = contentEl.createDiv();
    row.addClasses(["row-space-between", "p-30px"]);
    const cancelButton = row.createEl("button", { text: "Cancel" });
    cancelButton.onClickEvent(() => {
      this.close();
      this.onSubmit(false);
    });
    const confirmButton = row.createEl("button", { text: "Confirm" });
    confirmButton.addClasses(["bg-red"]);
    confirmButton.onClickEvent(() => {
      this.close();
      this.onSubmit(true);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  newCardNbOnReview: 1,
  reviewIndex: 0
};
var FlashcardSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Flashcard Learning settings" });
    new import_obsidian5.Setting(containerEl).setName("Reset all progress").setDesc("Be carefull, this action will erase all progress (ie. cards level and review indexes).").addButton(
      (button) => button.setButtonText("Reset learning").setCta().onClick(() => {
        new ConfirmModal(this.app, (answer) => {
          if (!answer)
            return;
          this.plugin.app.vault.getMarkdownFiles().filter((file) => {
            var _a, _b;
            return (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.flashcard;
          }).map(async (file) => {
            let needToSave = false;
            const lines = (await this.app.vault.read(file)).split("\n");
            lines.forEach((line, i) => {
              if (Flashcard.isStrAFlashcard(line)) {
                needToSave = true;
                const flashcard = Flashcard.fromString(file, i, line);
                if (flashcard.malformed)
                  lines[i] = flashcard.malformed;
                else
                  lines[i] = flashcard.reset();
              }
            });
            if (needToSave)
              this.plugin.app.vault.modify(file, lines.join("\n"));
          });
        }).open();
      })
    );
    new import_obsidian5.Setting(containerEl).setName("New cards added each review").setDesc("If you have new cards in your vault, this number will be added to the next review from those new cards").addText(
      (text) => text.setPlaceholder("1").setValue(this.plugin.settings.newCardNbOnReview + "").onChange(async (value) => {
        const parsed = parseInt(value);
        if (parsed) {
          this.plugin.settings.newCardNbOnReview = parsed;
          await this.plugin.saveData(this.plugin.settings);
        }
      })
    );
  }
};

// src/main.ts
var FlashcardLearningPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addSettingTab(new FlashcardSettingTab(this.app, this));
    const ribbonIcon = this.addRibbonIcon(
      "sheets-in-box",
      "Review flashcards",
      () => new HomeModal(this.app, this).open()
    );
    this.addCommand({
      id: "create-flashcard",
      name: "Create new flashcard",
      editorCallback: (editor, view) => {
        var _a;
        const frontmatter = (_a = this.app.metadataCache.getFileCache(view.file)) == null ? void 0 : _a.frontmatter;
        new CreateFlashcardModal(this.app, frontmatter, editor.getCursor().line, (fc1, fc2) => {
          editor.replaceSelection(fc1.toString() + "\n" + fc2.toString() + "\n");
          if (frontmatter && !(frontmatter == null ? void 0 : frontmatter.flaschcard) == void 0) {
            editor.replaceRange(
              "flashcard: true\n",
              { line: frontmatter.position.start.line + 1, ch: 0 },
              { line: frontmatter.position.start.line + 1, ch: 0 }
            );
          } else if (!frontmatter) {
            editor.replaceRange(
              "---\nflashcard: true\n---\n\n",
              { line: 0, ch: 0 },
              { line: 0, ch: 0 }
            );
          }
        }).open();
      }
    });
  }
  async onunload() {
  }
};
